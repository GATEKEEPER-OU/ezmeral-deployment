{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __PROJECT_NAME___apihandler import EZ_NAMESPACE, MODEL_ID, API_HANDLER, EXECUTABLE_JAR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run this box to retrieve the JWT token (neverming, if it will fail):\n",
    "#  - look into the \"CalledProcessError: Command '['bash', '-c', 'kubectl -n development apply ...\"\n",
    "#  - copy the token value between the params \"--token=\" and \"--server=\"\n",
    "#  - paste it into the variable declared in the box below\n",
    "#\n",
    "from ezmllib.model import register\n",
    "register(\n",
    "  \"Test __MODEL_DESC__ Hacking\",\n",
    "  EXECUTABLE_JAR, API_HANDLER, '1',\n",
    "  model_description=\"Test __MODEL_DESC__ Hacking\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The output of this box contains useful informations\n",
    "# - auth-token\n",
    "# - external service port\n",
    "# - ...\n",
    "#\n",
    "import subprocess\n",
    "\n",
    "LOAD_BALANCER_ID = '' # Copy the loadbalancer ID here\n",
    "jwt_token = '' # Copy the JWT here\n",
    "\n",
    "with open('stdout.txt','w') as fpOut, open('stderr.txt','w') as fpErr:\n",
    "  status = subprocess.call([\n",
    "    'kubectl', 'describe', 'service', LOAD_BALANCER_ID,\n",
    "    '--namespace', EZ_NAMESPACE,\n",
    "    '--server', 'https://kubernetes.default',\n",
    "    '--certificate-authority', '/var/run/secrets/kubernetes.io/serviceaccount/ca.crt',\n",
    "    '--token', jwt_token\n",
    "  ], stdout=fpOut, stderr=fpErr)\n",
    "\n",
    "print(f\"call status: {status}\")\n",
    "\n",
    "with open('stderr.txt') as fpErr:\n",
    "  errors = fpErr.read()\n",
    "  print(errors)\n",
    "\n",
    "with open('stdout.txt') as fpOut:\n",
    "  out = fpOut.read()\n",
    "  print(out)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Performes a request that tests public endpoint\n",
    "#\n",
    "import json\n",
    "import subprocess\n",
    "\n",
    "PORT = '' # Copy load-balancer port (second line)\n",
    "AUTH_TOKEN = '' # Copy the auth token\n",
    "\n",
    "# Fill the following variable before run\n",
    "post_body = {\n",
    "  \"use_scoring\": \"true\",\n",
    "  \"scoring_args\": {\n",
    "    \"endpoint\": \"\", # fill HERE\n",
    "    \"patient_identifier\": \"\", # fill HERE\n",
    "    \"start_date\": \"\", # fill HERE\n",
    "    \"end_date\": \"\" # fill HERE\n",
    "  }\n",
    "}\n",
    "\n",
    "with open('stdout.txt','w') as fpOut, open('stderr.txt','w') as fpErr:\n",
    "  URL = f\"https://hpe-ere-gw-lb.seclab.local:{PORT}/{MODEL_ID}/1/predict\"\n",
    "  status = subprocess.call([\n",
    "    'curl', '-k', '--location', '--request', 'POST', URL,\n",
    "      '--header', 'Content-Type: application/json',\n",
    "      '--header', f\"X-Auth-Token: {AUTH_TOKEN}\",\n",
    "      '--data-raw', json.dumps(post_body)\n",
    "  ], stdout=fpOut, stderr=fpErr)\n",
    "\n",
    "print(f\"call status: {status}\")\n",
    "\n",
    "with open('stderr.txt') as fpErr:\n",
    "  errors = fpErr.read()\n",
    "  print(errors)\n",
    "\n",
    "with open('stdout.txt') as fpOut:\n",
    "  out = fpOut.read()\n",
    "  print(out)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
