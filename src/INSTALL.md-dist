# Ezmeral - AI Model deployment
This document describes all the steps to deploy the __MODEL_DESC__ onto the Ezmeral platform

## Setup model

### Prepare

Clone the `ezmeral-deployment` project from the [repository](https://github.com/GATEKEEPER-OU/ezmeral-deployment) into the AI model folder `~/project_repo/code`.

```
$ cd ~/project_repo/code
$ git clone https://github.com/GATEKEEPER-OU/ezmeral-deployment.git __PROJECT_NAME__
```

If you encounter problems with the downloading, you may need to set the proxy.
So, run the line below and try to clone again.

```
$ export http_proxy=web-proxy.seclab.local:8088; \
  export https_proxy=web-proxy.seclab.local:8088
```

### Configure

Get inside the project folder and configure the desired AI model.

```
$ ./configure.sh __PROJECT_TAG__
```

At the end of the configuration stage, new files will appear:

- get-dependences.sh
- __PROJECT_NAME___apihandler.py
- deployment.ipynb
- test.ipynb
- run.ipynb
- INSTALL.md

Proceed by downloading the AI model jar from the GK maven repository.

```
$ ./get-dependences.sh
```


## Test ___PROJECT_NAME___apihandler.py_

Before preceed with the AI model deployment, it is strongly recommended to test it locally. You may need to install manually the JDK on your notebook controller.

### Install JDK

If the JDK is not installed on the notebook controller, run the following command

```
$ ./getjdk-tar.sh && source ~/.bash_profile
```

### Test the apihandler

Open the `test` notebook on the online JupiterLab platform offered by HPE Ezmeral, run all boxes and check the response. In case of error, or lack of output, view the file `stderr.txt`.

## Deployment

Open the `deployment` notebook from JupiterLab, execute all boxes and wait for the app setup.
It will take a few minutes. This step will produce two pods named:

- who-adherence-model-restserver-XXXXX-0
- who-adherence-model-loadbalancer-YYYYY-0

where `XXXXX` and `YYYYY` are random codes generated by the platform.
These informations can be collected from the HPE Ezmeral [Dashbord](https://hpe-ere-controller.seclab.local/bdswebui/k8stenant/dashboard), clicking on "All pods (aggregated)" combox, or running on terminal (once configured `kubectl` tool) the command below.

```
kubectl get -n development pod -o wide | grep __PROJECT_TAG__
```

Once completed, we must install java virtual machine into the `restserver`.

### Configure _kubectl_

From the HPE Ezmeral [Dashbord](https://hpe-ere-controller.seclab.local/bdswebui/k8stenant/dashboard), download the `kubeconfig` and copy the content into the `~/.kube/config` located in the notebook controller user home.
Probably you want change the part relative to the authentication. Into the bottom of the file, look for the lines `--hpecp-token` and `--hpecp-token-expiry`, then comment out those lines and save.
It may be required restart the terminal. (?)

### Install JDK on the pod

Before execute the JDK remote installation, you must collect the `restserver` and `loadbalancer` pod names as explained previously. It is something like 'who-adherence-model-restserver-XXXXX-0', or 'who-adherence-model-loadbalancer-YYYYY-0'.
Then proceed with the installation running the next commands for each pod.

```
kubectl -n development exec -it <POD_NAME> -- bash
```

In case of '<span style="color:red">`Unable to connect to the server: Forbidden`</span>' error, you will need to disable the proxy using `./unset-proxy.sh` command.

Once open a terminal onto a pod, run

```
$ export http_proxy=web-proxy.seclab.local:8088; \
  export https_proxy=web-proxy.seclab.local:8088
$ yum -y update # Optional
$ rpm --import https://yum.corretto.aws/corretto.key
$ curl -L -o /etc/yum.repos.d/corretto.repo https://yum.corretto.aws/corretto.repo
$ yum install -y java-17-amazon-corretto-devel
$ exit
```

## Test the service

Open the `run` notebook:

- Run Box #1.
  This will __fail__, but it will suggest the `jwt` required by the next step. So, collect the `--token` and copy&paste it into the next box as `JWT` value.
- Box #2.
  Collect the `load_balancer_id` as explained previously, paste it as `LOAD_BALANCER_ID` value and run the box. In the response you will find useful informations:
 - public service `port`
 - the `auth_token` to append the headers of an HTTP request
- Box #3.
  In this step we will perform a HTTP request to the public gateway to test the api service. So, collect `port` and `auth_token` from the previous response, paste them in the relative variables, fill also the `post_body` parameters, then run the box. If everything went well, you will view the FHIR result in the box below.


## Useful commands

### Establish a connection with the cluster

Run the command below and follow the wizard prompt.

```
$ kubectl hpecp refresh hpe-ere-gw-lb.seclab.local
```

### Get pods
```
$ kubectl get -n development pod | grep __PROJECT_TAG__
```

### Delete deployment
```
$ kubectl delete kdcluster __MODEL_ID__
```

### Delete hang [terminating] state
```
$ kubectl delete pod --force <POD_NAME>
```