## ########################################################################## ##
#              Code generated by "configure.sh"; DO NOT EDIT.                  #
## ########################################################################## ##

import os
import sys
import json
import subprocess

#
# ###################################################################### #

JAR_VERS = '__JAR_VERS__'
JAR_NAME = '__JAR_NAME__'
PROJECT_NAME = '__PROJECT_NAME__'
EZ_NAMESPACE = '__EZ_NAMESPACE__'

MODEL_ID     = '__MODEL_ID__'
MODEL_DESC   = '__MODEL_DESC__'
DEPLOYM_DESC = '__DEPLOYM_DESC__'
LOAD_BALANCER_ID = '' # Retrieve it from HPE Ezmeral Dashboard - open the combobox "All Pods (aggregated)"

PROJ_DIR   = '/bd-fs-mnt/project_repo'
CODE_DIR   = f"{PROJ_DIR}/code/{PROJECT_NAME}"
DATA_DIR   = f"{PROJ_DIR}/data/{PROJECT_NAME}"
MODELS_DIR = f"{PROJ_DIR}/models/{PROJECT_NAME}"

EXECUTABLE_JAR = f"{CODE_DIR}/{JAR_NAME}-{JAR_VERS}-jar-with-dependencies.jar"
API_HANDLER    = f"{CODE_DIR}/{PROJECT_NAME}_apihandler.py"

MARKER='__MARKER__'

# ###################################################################### #
#

def extractReportbyMarkers(text, markerx, markery):
    """
      Extract output report, which is embedded between two markers
    """
    report = ""
    a = text.find(markerx)
    if a >= 0:
        b = text.find(markery, a+len(markerx))
        if b > 0:
            report = text[a+len(markerx):b]
    return report

def main(json_input):
    # set args for java jar file
    endpoint = json_input['endpoint']
    patient_identifier = json_input['patient_identifier']
    start_date = json_input['start_date']
    end_date = json_input['end_date']

    # Validate input
    if patient_identifier is not None:
        arg0 = endpoint
        arg1 = patient_identifier
        arg2 = start_date
        arg3 = end_date
    else:
        raise Exception("Invalid input") # terminate

    # Call java code
    status = -1
    with open('stdout.txt', 'w') as fpOut, open('stderr.txt', 'w') as fpErr:
        status = subprocess.call([
            'java', '-jar', EXECUTABLE_JAR,
                '--endpoint', arg0,
                '--patient-identifier', arg1,
                '--start-date', arg2,
                '--end-date', arg3,
                '--no-chart'
        ], stdout=fpOut, stderr=fpErr)

    if status == 0:
        with open('stdout.txt') as fpOut:
            output = fpOut.read()
            report = extractReportbyMarkers(output, f"<{MARKER}>", f"</{MARKER}>")
            print(report)
    else:
        with open('stderr.txt') as fpErr:
            the_error = fpErr.read()
            print(the_error)
        raise Exception("Internal error")

if __name__ == "__main__":
    main(json.loads(sys.argv[1]))
