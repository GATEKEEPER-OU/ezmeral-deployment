## ########################################################################## ##
#              Code generated by "configure.sh"; DO NOT EDIT.                  #
## ########################################################################## ##

import sys
import json
import subprocess

#
# ############################################################################ #

JAR_VERS = '__JAR_VERS__'
JAR_NAME = '__JAR_NAME__'
PROJECT_NAME = '__PROJECT_NAME__'
EZ_NAMESPACE = '__EZ_NAMESPACE__'

MODEL_ID     = '__MODEL_ID__'
MODEL_DESC   = '__MODEL_DESC__'
DEPLOYM_DESC = '__DEPLOYM_DESC__'

PROJ_DIR   = '/bd-fs-mnt/project_repo'
CODE_DIR   = f"{PROJ_DIR}/code/{PROJECT_NAME}"
DATA_DIR   = f"{PROJ_DIR}/data/{PROJECT_NAME}"
MODELS_DIR = f"{PROJ_DIR}/models/{PROJECT_NAME}"

EXECUTABLE_JAR = f"{CODE_DIR}/{JAR_NAME}-{JAR_VERS}-jar-with-dependencies.jar"
API_HANDLER    = f"{CODE_DIR}/{PROJECT_NAME}_apihandler.py"

MARKER='__MARKER__'

# ############################################################################ #
#

def extractReportbyMarkers(text, marker_start, marker_end):
  """
    Extract output report, which is embedded between two markers
  """
  report = ""
  a = text.find(marker_start)
  if a >= 0:
    b = text.find(marker_end, a+len(marker_start))
    if b > 0:
      report = text[a+len(marker_start):b]
  return report

def mandatory_check(args, field_name):
  msg = "'{}' param required"
  if field_name not in args:
    raise Exception(msg.format(field_name))

def input_filter(args):
  mandatory_check(args, 'endpoint')
  mandatory_check(args, 'patient_identifier')
  mandatory_check(args, 'start_date')
  mandatory_check(args, 'end_date')

if __name__ == "__main__":
  post_body = sys.argv[1]
  body_content = json.loads(post_body)
  input_filter(body_content)

  args = [
    '--endpoint', body_content['endpoint'],
#     '--proxy', body_content['proxy'],
    '--patient-identifier', body_content['patient_identifier'],
    '--start-date', body_content['start_date'],
    '--end-date', body_content['end_date'],
    '--no-chart'
  ]
  if 'proxy' in body_content:
    args += ['--proxy', body_content['proxy']]

  cmd = ['java', '-jar', EXECUTABLE_JAR]
  cmd_with_args = cmd + args
  # print(cmd_with_args) # DEBUG

  with open('stdout.txt', 'w') as fpOut, open('stderr.txt', 'w') as fpErr:
    status = subprocess.call(cmd_with_args, stdout=fpOut, stderr=fpErr)

    if status == 0:
      with open('stdout.txt') as fpOut:
        output = fpOut.read()
        report = extractReportbyMarkers(output, f"<{MARKER}>", f"</{MARKER}>")
        print(report)

    else:
      with open('stderr.txt') as fpErr:
        the_error = fpErr.read()
        print(the_error)
      raise Exception("Internal error")
