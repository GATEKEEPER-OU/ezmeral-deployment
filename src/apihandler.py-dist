## ########################################################################## ##
#              Code generated by "configure.sh"; DO NOT EDIT.                  #
## ########################################################################## ##

import sys
import subprocess

#
# ############################################################################ #

JAR_VERS = '__JAR_VERS__'
JAR_NAME = '__JAR_NAME__'
PROJECT_NAME = '__PROJECT_NAME__'
EZ_NAMESPACE = '__EZ_NAMESPACE__'

MODEL_ID     = '__MODEL_ID__'
MODEL_DESC   = '__MODEL_DESC__'
DEPLOYM_DESC = '__DEPLOYM_DESC__'

PROJ_DIR   = '/bd-fs-mnt/project_repo'
CODE_DIR   = f"{PROJ_DIR}/code/{PROJECT_NAME}"
DATA_DIR   = f"{PROJ_DIR}/data/{PROJECT_NAME}"
MODELS_DIR = f"{PROJ_DIR}/models/{PROJECT_NAME}"

EXECUTABLE_JAR = f"{CODE_DIR}/{JAR_NAME}-{JAR_VERS}-jar-with-dependencies.jar"
API_HANDLER    = f"{CODE_DIR}/{PROJECT_NAME}_apihandler.py"

MARKER='__MARKER__'

# ############################################################################ #
#

def extractReportbyMarkers(text, markerx, markery):
  """
    Extract output report, which is embedded between two markers
  """
  report = ""
  a = text.find(markerx)
  if a >= 0:
    b = text.find(markery, a+len(markerx))
    if b > 0:
      report = text[a+len(markerx):b]
  return report

def main(argv):
  params = argv[1:]
  cmd = ['java', '-jar', EXECUTABLE_JAR]

  status = -1
  with open('stdout.txt', 'w') as fpOut, open('stderr.txt', 'w') as fpErr:
    status = subprocess.call(cmd + params, stdout=fpOut, stderr=fpErr)

  if status == 0:
    with open('stdout.txt') as fpOut:
      output = fpOut.read()
      report = extractReportbyMarkers(output, f"<{MARKER}>", f"</{MARKER}>")
      print(report)
  else:
    with open('stderr.txt') as fpErr:
      the_error = fpErr.read()
      print(the_error)
    raise Exception("Internal error")

if __name__ == "__main__":
  main(sys.argv)
